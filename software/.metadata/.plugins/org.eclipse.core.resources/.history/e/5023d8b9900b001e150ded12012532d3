/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "system.h"
#include "math.h"

long long* leer_fifo_64_bit(unsigned int* fifo_down_addr,unsigned int* fifo_up_addr,int N);

int main()
{

  int * muestras_ptr = (int*)DATOS_MUESTREADOS_BASE;

  unsigned int * fifo_1_ptr = (int*) FIFO_1_BASE;
  unsigned int * fifo_2_ptr = (int*) FIFO_2_BASE;
  unsigned int * fifo_3_ptr = (int*) FIFO_3_BASE;
  unsigned int * fifo_4_ptr = (int*) FIFO_4_BASE;

  int i=0;

  printf("Datos muestreados: \n");
  for (i=0;i<512;i++)
  {
	  printf("%d, ",*muestras_ptr);
  }

  long long fase,cuad;

  long long * resultados_fase;
  long long * resultados_cuad;

  resultados_fase = leer_fifo_64_bit(fifo_1_ptr,fifo_2_ptr,1024);
  resultados_cuad = leer_fifo_64_bit(fifo_3_ptr,fifo_4_ptr,1024);

  fase = *(resultados_fase+1023);
  cuad = *(resultados_cuad+1023);

  printf("\n\nResultados fase: \n");
  for (i=0;i<1024;i++)
   {
 	  printf("%lld, ",*(resultados_fase+i));
   }

  printf("\n\nResultados cuadratura: \n");
  for (i=0;i<1024;i++)
   {
 	  printf("%lld, ",*(resultados_cuad+i));
   }

  float amplitud_calculada = (sqrt( (fase/ (64*8))*(fase / (64*8)) + (cuad / (32*16))*(cuad / (64*8))  ) ) *2/32767;

  printf("\nAmplitud calculada: %f\n",amplitud_calculada);

  return 0;
}


long long* leer_fifo_64_bit(unsigned int* fifo_down_addr,unsigned int* fifo_up_addr,int N)
{
	long long unsigned res_low,res_up;

	long long resultados [N] ;
	for(int i=0;i<N;i++)
	{
		res_low = *(fifo_down_addr);
		res_up = *(fifo_up_addr);
		resultados[i] = (res_up << 32) | res_low;
	}
	return resultados;
}


